// Generated by "npm run codegen". Do not modify this file manually.
import type { BN } from '@project-serum/anchor';
import type { PublicKey } from '@solana/web3.js';

export type IndividualPoolState = {
  readonly productId: BN;
  readonly programMetadataStateKey: PublicKey;
  readonly individualPoolStatePdaBump: number;
  readonly individualPoolAuwtTokenAccountKey: PublicKey;
  readonly individualPoolAuwtTokenAccountVirtualAmount: BN;
  readonly individualPoolLpMintAuthPdaKey: PublicKey;
  readonly individualPoolLpMintAuthPdaBump: number;
  readonly individualPoolLpMintKey: PublicKey;
  readonly individualPoolLpVirtualSupply: BN;
  readonly individualPoolMaxConcentrationPctg: BN;
  readonly individualPoolCapitalToCapacityMultiplier: BN;
  readonly individualPoolCapacityOccupiedAmount: BN;
  readonly auwtCommonSharedUnderwritingWeight: BN;
  readonly auwtCommonSharedCapacityOccupiedAmount: BN;
  readonly individualPoolIsPaused: boolean;
};
export type PoolMetadataState = {
  readonly poolAdminAuthKey: PublicKey;
  readonly poolCallerKeyArray: PublicKey[];
  readonly treasuryAuwtAccountKey: PublicKey;
  readonly treasuryAuwtUnstakeFeePctg: BN;
  readonly poolCpiAuthPdaKey: PublicKey;
  readonly poolCpiAuthPdaBump: number;
  readonly poolCpiAuthAuwtTokenProgIndex: BN;
  readonly poolAuwtMintKey: PublicKey;
  readonly poolAuwtAuthPdaKey: PublicKey;
  readonly poolAuwtAuthPdaBump: number;
  readonly poolUnstakeWaitingPeriodTime: BN;
  readonly poolAuwtCommonTotalUnderwritingWeight: BN;
  readonly poolDefaultMaxConcentrationPctg: BN;
  readonly programIsPaused: boolean;
};
export type StakerState = {
  readonly individualPoolStateKey: PublicKey;
  readonly stakerStatePdaBump: number;
  readonly lastStakeUnixTimestamp: BN;
};
export type InitializeMetadataStateParam = {
  readonly poolAuwtAuthPdaBump: number;
  readonly poolCpiAuthPdaBump: number;
  readonly poolCpiAuthAuwtTokenProgIndex: BN;
  readonly poolDefaultMaxConcentrationPctg: BN;
  readonly poolUnstakeWaitingPeriodTime: BN;
  readonly treasuryAuwtUnstakeFeePctg: BN;
};
export type InitializeMetadataStateAccounts = {
  readonly programInitializerAuth: PublicKey | string;
  readonly programMetadataState: PublicKey | string;
  readonly treasuryAuwtAccount: PublicKey | string;
  readonly poolAdminAuth: PublicKey | string;
  readonly poolAuwtAuthPda: PublicKey | string;
  readonly poolAuwtMint: PublicKey | string;
  readonly poolCpiAuthPda: PublicKey | string;
  readonly sysvarRent: PublicKey | string;
  readonly systemProgram: PublicKey | string;
};
export type AdminUpdateCallerInfoParam = {
  readonly callerIndex: BN;
  readonly callerKey: PublicKey;
};
export type AdminUpdateCallerInfoAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly poolAdminAuth: PublicKey | string;
};
export type AdminUpdateAdminAuthInfoAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly newPoolAdminAuth: PublicKey | string;
  readonly poolAdminAuth: PublicKey | string;
  readonly sysvarRent: PublicKey | string;
};
export type AdminUpdateMetadataInfoParam = {
  readonly poolCpiAuthAuwtTokenProgIndex: BN;
  readonly poolDefaultMaxConcentrationPctg: BN;
  readonly poolUnstakeWaitingPeriodTime: BN;
  readonly treasuryAuwtUnstakeFeePctg: BN;
  readonly programIsPaused: boolean;
};
export type AdminUpdateMetadataInfoAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly poolAdminAuth: PublicKey | string;
};
export type InitializeIndividualPoolStateParam = {
  readonly productId: BN;
  readonly auwtCommonSharedUnderwritingWeight: BN;
  readonly lpAuwtMintAuthPdaBump: number;
  readonly maxConcentrationPctg: BN;
  readonly capitalToCapacityMultiplier: BN;
};
export type InitializeIndividualPoolStateAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly poolAdminAuth: PublicKey | string;
  readonly poolAuwtMint: PublicKey | string;
  readonly individualPoolState: PublicKey | string;
  readonly individualPoolAuwtTokenAccount: PublicKey | string;
  readonly individualPoolLpAuwtMintAuthPda: PublicKey | string;
  readonly individualPoolLpAuwtMint: PublicKey | string;
  readonly sysvarRent: PublicKey | string;
  readonly systemProgram: PublicKey | string;
};
export type AdminUpdateIndividualPoolInfoParam = {
  readonly capitalToCapacityMultiplier: BN;
  readonly auwtCommonSharedUnderwritingWeight: BN;
  readonly maxConcentrationPctg: BN;
  readonly individualPoolIsPaused: boolean;
};
export type AdminUpdateIndividualPoolInfoAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly poolAdminAuth: PublicKey | string;
  readonly individualPoolState: PublicKey | string;
  readonly auwtState: PublicKey | string;
  readonly poolCpiAuthPda: PublicKey | string;
  readonly auwtProgram: PublicKey | string;
};
export type StakeToIndividualPoolParam = {
  readonly auwtAmount: BN;
};
export type StakeToIndividualPoolAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly individualPoolState: PublicKey | string;
  readonly individualPoolAuwtTokenAccount: PublicKey | string;
  readonly individualPoolLpAuwtMintAuthPda: PublicKey | string;
  readonly individualPoolLpAuwtMint: PublicKey | string;
  readonly auwtState: PublicKey | string;
  readonly poolCpiAuthPda: PublicKey | string;
  readonly staker: PublicKey | string;
  readonly stakerState: PublicKey | string;
  readonly stakerAuwtAccount: PublicKey | string;
  readonly stakerLpAuwtAccount: PublicKey | string;
  readonly stakeReferrer: PublicKey | string;
  readonly sysvarRent: PublicKey | string;
  readonly sysvarClock: PublicKey | string;
  readonly systemProgram: PublicKey | string;
  readonly tokenProgram: PublicKey | string;
  readonly auwtProgram: PublicKey | string;
};
export type UnstakeFromIndividualPoolParam = {
  readonly lpAuwtAmount: BN;
};
export type UnstakeFromIndividualPoolAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly poolAuwtAuthPda: PublicKey | string;
  readonly individualPoolState: PublicKey | string;
  readonly individualPoolAuwtTokenAccount: PublicKey | string;
  readonly individualPoolLpAuwtMintAuthPda: PublicKey | string;
  readonly individualPoolLpAuwtMint: PublicKey | string;
  readonly auwtState: PublicKey | string;
  readonly poolCpiAuthPda: PublicKey | string;
  readonly staker: PublicKey | string;
  readonly stakerState: PublicKey | string;
  readonly stakerLpAuwtBurnFromAccount: PublicKey | string;
  readonly stakerAuwtReceiverAccount: PublicKey | string;
  readonly sysvarRent: PublicKey | string;
  readonly sysvarClock: PublicKey | string;
  readonly tokenProgram: PublicKey | string;
  readonly auwtProgram: PublicKey | string;
};
export type HandleUpdateOccupiedCapacityParam = {
  readonly callerIndex: BN;
  readonly productId: BN;
  readonly addFlag: boolean;
  readonly commonOccupiedCapacityAmount: BN;
  readonly individualOccupiedCapacityAmount: BN;
};
export type HandleUpdateOccupiedCapacityAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly individualPoolState: PublicKey | string;
  readonly allowedCaller: PublicKey | string;
};
export type HandleDispatchPremiumParam = {
  readonly callerIndex: BN;
  readonly productId: BN;
  readonly individualEarnedPremiumAmount: BN;
};
export type HandleDispatchPremiumAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly individualPoolState: PublicKey | string;
  readonly allowedCaller: PublicKey | string;
};
export type CollectClaimPayoutParam = {
  readonly callerIndex: BN;
  readonly auwtPayoutAmount: BN;
};
export type CollectClaimPayoutAccounts = {
  readonly programMetadataState: PublicKey | string;
  readonly poolAuwtAuthPda: PublicKey | string;
  readonly individualPoolState: PublicKey | string;
  readonly individualPoolAuwtTokenAccount: PublicKey | string;
  readonly auwtState: PublicKey | string;
  readonly poolCpiAuthPda: PublicKey | string;
  readonly claimPayoutAuwtAccount: PublicKey | string;
  readonly allowedCaller: PublicKey | string;
  readonly tokenProgram: PublicKey | string;
  readonly auwtProgram: PublicKey | string;
};
