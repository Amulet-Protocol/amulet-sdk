// Generated by "npm run codegen". Do not modify this file manually.
import type { AccountClient, Idl, MethodsNamespace, Provider } from '@project-serum/anchor';
import type { PublicKey } from '@solana/web3.js';
import type { InstructionOption } from './Common';
import type * as entity from './AmuletSolStakingEntity';
import { Program } from '@project-serum/anchor';

type AmuletSolStakingAccountClients = {
  readonly metadataState: AccountClient;
  readonly posState: AccountClient;
  readonly ticketState: AccountClient;
};
type AmuletSolStakingMethodBuilders = {
  readonly initializeMetadataState: MethodsNamespace[keyof MethodsNamespace];
  readonly initializePosState: MethodsNamespace[keyof MethodsNamespace];
  readonly posDepositSol: MethodsNamespace[keyof MethodsNamespace];
  readonly posProposeUnstakeSol: MethodsNamespace[keyof MethodsNamespace];
  readonly liqAddSol: MethodsNamespace[keyof MethodsNamespace];
  readonly liqRemove: MethodsNamespace[keyof MethodsNamespace];
  readonly liqUnstakeSol: MethodsNamespace[keyof MethodsNamespace];
  readonly addValidator: MethodsNamespace[keyof MethodsNamespace];
  readonly removeValidator: MethodsNamespace[keyof MethodsNamespace];
  readonly updateValidator: MethodsNamespace[keyof MethodsNamespace];
  readonly posDelegateStake: MethodsNamespace[keyof MethodsNamespace];
  readonly posDeactivateStake: MethodsNamespace[keyof MethodsNamespace];
  readonly posDirectDeactivateStake: MethodsNamespace[keyof MethodsNamespace];
  readonly posUpdateDeactivatedStake: MethodsNamespace[keyof MethodsNamespace];
  readonly posUpdateActiveStake: MethodsNamespace[keyof MethodsNamespace];
  readonly posMergeStake: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdatePosUnstakeInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdatePosStakeInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateTreasuryAccountInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateMetadataAdminAuthInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdatePosAdminAuthInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateProgramPauseInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly posWithdrawTicketSol: MethodsNamespace[keyof MethodsNamespace];
  readonly adminClosePosAccount: MethodsNamespace[keyof MethodsNamespace];
};

export class AmuletSolStakingProgram {
  public readonly program: Program;

  public constructor(idl: Idl, address: PublicKey, provider: Provider) {
    this.program = new Program(idl, address, provider);
  }

  public get idl() {
    return this.program.idl;
  }

  public get programId() {
    return this.program.programId;
  }

  public get account() {
    return this.program.account as AmuletSolStakingAccountClients;
  }

  public get methods() {
    return this.program.methods as AmuletSolStakingMethodBuilders;
  }

  public initializeMetadataState(option: InstructionOption<entity.InitializeMetadataStateParam, entity.InitializeMetadataStateAccounts>) {
    return this.methods.initializeMetadataState(option.param.programAuthPdaBump, option.param.programPosSolPdaBump, option.param.programLiqSolPdaBump).accounts(option.accounts);
  }

  public initializePosState(option: InstructionOption<entity.InitializePosStateParam, entity.InitializePosStateAccounts>) {
    return this.methods.initializePosState(option.param.posStakeDepositPdaBump, option.param.posStakeWithdrawPdaBump).accounts(option.accounts);
  }

  public posDepositSol(option: InstructionOption<entity.PosDepositSolParam, entity.PosDepositSolAccounts>) {
    return this.methods.posDepositSol(option.param.solAmount).accounts(option.accounts);
  }

  public posProposeUnstakeSol(option: InstructionOption<entity.PosProposeUnstakeSolParam, entity.PosProposeUnstakeSolAccounts>) {
    return this.methods.posProposeUnstakeSol(option.param.amtsolAmount).accounts(option.accounts);
  }

  public liqAddSol(option: InstructionOption<entity.LiqAddSolParam, entity.LiqAddSolAccounts>) {
    return this.methods.liqAddSol(option.param.solAmount).accounts(option.accounts);
  }

  public liqRemove(option: InstructionOption<entity.LiqRemoveParam, entity.LiqRemoveAccounts>) {
    return this.methods.liqRemove(option.param.lpSolAmtsolAmount).accounts(option.accounts);
  }

  public liqUnstakeSol(option: InstructionOption<entity.LiqUnstakeSolParam, entity.LiqUnstakeSolAccounts>) {
    return this.methods.liqUnstakeSol(option.param.amtsolAmount).accounts(option.accounts);
  }

  public addValidator(option: InstructionOption<entity.AddValidatorParam, entity.AddValidatorAccounts>) {
    return this.methods.addValidator(option.param.score).accounts(option.accounts);
  }

  public removeValidator(option: InstructionOption<entity.RemoveValidatorParam, entity.RemoveValidatorAccounts>) {
    return this.methods.removeValidator(option.param.index, option.param.validatorVoteAccount).accounts(option.accounts);
  }

  public updateValidator(option: InstructionOption<entity.UpdateValidatorParam, entity.UpdateValidatorAccounts>) {
    return this.methods.updateValidator(option.param.index, option.param.validatorVoteAccount, option.param.score).accounts(option.accounts);
  }

  public posDelegateStake(option: InstructionOption<entity.PosDelegateStakeParam, entity.PosDelegateStakeAccounts>) {
    return this.methods.posDelegateStake(option.param.validatorIndex).accounts(option.accounts);
  }

  public posDeactivateStake(option: InstructionOption<entity.PosDeactivateStakeParam, entity.PosDeactivateStakeAccounts>) {
    return this.methods.posDeactivateStake(option.param.validatorIndex, option.param.stakeIndex).accounts(option.accounts);
  }

  public posDirectDeactivateStake(option: InstructionOption<entity.PosDirectDeactivateStakeParam, entity.PosDirectDeactivateStakeAccounts>) {
    return this.methods.posDirectDeactivateStake(option.param.validatorIndex, option.param.stakeIndex).accounts(option.accounts);
  }

  public posUpdateDeactivatedStake(option: InstructionOption<entity.PosUpdateDeactivatedStakeParam, entity.PosUpdateDeactivatedStakeAccounts>) {
    return this.methods.posUpdateDeactivatedStake(option.param.stakeIndex).accounts(option.accounts);
  }

  public posUpdateActiveStake(option: InstructionOption<entity.PosUpdateActiveStakeParam, entity.PosUpdateActiveStakeAccounts>) {
    return this.methods.posUpdateActiveStake(option.param.validatorIndex, option.param.stakeIndex).accounts(option.accounts);
  }

  public posMergeStake(option: InstructionOption<entity.PosMergeStakeParam, entity.PosMergeStakeAccounts>) {
    return this.methods.posMergeStake(option.param.validatorIndex, option.param.sourceStakeIndex, option.param.targetStakeIndex).accounts(option.accounts);
  }

  public adminUpdatePosUnstakeInfo(option: InstructionOption<entity.AdminUpdatePosUnstakeInfoParam, entity.AdminUpdatePosUnstakeInfoAccounts>) {
    return this.methods
      .adminUpdatePosUnstakeInfo(
        option.param.posProposeUnstakeWaitingEpoch,
        option.param.programLiqFeeCeilingSol,
        option.param.programLiqFeeFloorSol,
        option.param.programLiqFeeBasepoint,
        option.param.programLiqFeeMax,
        option.param.programLiqFeeMin,
        option.param.programLiqFeeTreasuryCut,
      )
      .accounts(option.accounts);
  }

  public adminUpdatePosStakeInfo(option: InstructionOption<entity.AdminUpdatePosStakeInfoParam, entity.AdminUpdatePosStakeInfoAccounts>) {
    return this.methods
      .adminUpdatePosStakeInfo(
        option.param.posMinStakeAmount,
        option.param.posNumOfSlotsBeforeEndOfEpoch,
        option.param.posStakeAccountRewardFeeBasepoint,
        option.param.posStakeAccountRewardFeeRate,
        option.param.posMaxStakeAccountRewardPctgBasepoint,
        option.param.posMaxStakeAccountRewardPctgRate,
        option.param.validatorExtraDelegationRunCount,
      )
      .accounts(option.accounts);
  }

  public adminUpdateTreasuryAccountInfo(option: InstructionOption<void, entity.AdminUpdateTreasuryAccountInfoAccounts>) {
    return this.methods.adminUpdateTreasuryAccountInfo().accounts(option.accounts);
  }

  public adminUpdateMetadataAdminAuthInfo(option: InstructionOption<void, entity.AdminUpdateMetadataAdminAuthInfoAccounts>) {
    return this.methods.adminUpdateMetadataAdminAuthInfo().accounts(option.accounts);
  }

  public adminUpdatePosAdminAuthInfo(option: InstructionOption<void, entity.AdminUpdatePosAdminAuthInfoAccounts>) {
    return this.methods.adminUpdatePosAdminAuthInfo().accounts(option.accounts);
  }

  public adminUpdateProgramPauseInfo(option: InstructionOption<entity.AdminUpdateProgramPauseInfoParam, entity.AdminUpdateProgramPauseInfoAccounts>) {
    return this.methods.adminUpdateProgramPauseInfo(option.param.programIsPaused).accounts(option.accounts);
  }

  public posWithdrawTicketSol(option: InstructionOption<void, entity.PosWithdrawTicketSolAccounts>) {
    return this.methods.posWithdrawTicketSol().accounts(option.accounts);
  }

  public adminClosePosAccount(option: InstructionOption<void, entity.AdminClosePosAccountAccounts>) {
    return this.methods.adminClosePosAccount().accounts(option.accounts);
  }
}
