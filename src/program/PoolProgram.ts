// Generated by "npm run codegen". Do not modify this file manually.
import type { AccountClient, Idl, MethodsNamespace, Provider } from '@project-serum/anchor';
import type { PublicKey } from '@solana/web3.js';
import type { InstructionOption } from './Common';
import type * as entity from './PoolEntity';
import { Program } from '@project-serum/anchor';

type PoolAccountClients = {
  readonly individualPoolState: AccountClient;
  readonly poolMetadataState: AccountClient;
  readonly stakerState: AccountClient;
};
type PoolMethodBuilders = {
  readonly initializeMetadataState: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateCallerInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateAdminAuthInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateMetadataInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly initializeIndividualPoolState: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateIndividualPoolInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly stakeToIndividualPool: MethodsNamespace[keyof MethodsNamespace];
  readonly unstakeFromIndividualPool: MethodsNamespace[keyof MethodsNamespace];
  readonly handleUpdateOccupiedCapacity: MethodsNamespace[keyof MethodsNamespace];
  readonly handleDispatchPremium: MethodsNamespace[keyof MethodsNamespace];
  readonly collectClaimPayout: MethodsNamespace[keyof MethodsNamespace];
};

export class PoolProgram {
  public readonly program: Program;

  public constructor(idl: Idl, address: PublicKey, provider: Provider) {
    this.program = new Program(idl, address, provider);
  }

  public get idl() {
    return this.program.idl;
  }

  public get programId() {
    return this.program.programId;
  }

  public get account() {
    return this.program.account as PoolAccountClients;
  }

  public get methods() {
    return this.program.methods as PoolMethodBuilders;
  }

  public initializeMetadataState(option: InstructionOption<entity.InitializeMetadataStateParam, entity.InitializeMetadataStateAccounts>) {
    return this.methods
      .initializeMetadataState(
        option.param.poolAuwtAuthPdaBump,
        option.param.poolCpiAuthPdaBump,
        option.param.poolCpiAuthAuwtTokenProgIndex,
        option.param.poolDefaultMaxConcentrationPctg,
        option.param.poolUnstakeWaitingPeriodTime,
        option.param.treasuryAuwtUnstakeFeePctg,
      )
      .accounts(option.accounts);
  }

  public adminUpdateCallerInfo(option: InstructionOption<entity.AdminUpdateCallerInfoParam, entity.AdminUpdateCallerInfoAccounts>) {
    return this.methods.adminUpdateCallerInfo(option.param.callerIndex, option.param.callerKey).accounts(option.accounts);
  }

  public adminUpdateAdminAuthInfo(option: InstructionOption<void, entity.AdminUpdateAdminAuthInfoAccounts>) {
    return this.methods.adminUpdateAdminAuthInfo().accounts(option.accounts);
  }

  public adminUpdateMetadataInfo(option: InstructionOption<entity.AdminUpdateMetadataInfoParam, entity.AdminUpdateMetadataInfoAccounts>) {
    return this.methods
      .adminUpdateMetadataInfo(
        option.param.poolCpiAuthAuwtTokenProgIndex,
        option.param.poolDefaultMaxConcentrationPctg,
        option.param.poolUnstakeWaitingPeriodTime,
        option.param.treasuryAuwtUnstakeFeePctg,
        option.param.programIsPaused,
      )
      .accounts(option.accounts);
  }

  public initializeIndividualPoolState(option: InstructionOption<entity.InitializeIndividualPoolStateParam, entity.InitializeIndividualPoolStateAccounts>) {
    return this.methods
      .initializeIndividualPoolState(
        option.param.productId,
        option.param.auwtCommonSharedUnderwritingWeight,
        option.param.lpAuwtMintAuthPdaBump,
        option.param.maxConcentrationPctg,
        option.param.capitalToCapacityMultiplier,
      )
      .accounts(option.accounts);
  }

  public adminUpdateIndividualPoolInfo(option: InstructionOption<entity.AdminUpdateIndividualPoolInfoParam, entity.AdminUpdateIndividualPoolInfoAccounts>) {
    return this.methods
      .adminUpdateIndividualPoolInfo(option.param.capitalToCapacityMultiplier, option.param.auwtCommonSharedUnderwritingWeight, option.param.maxConcentrationPctg, option.param.individualPoolIsPaused)
      .accounts(option.accounts);
  }

  public stakeToIndividualPool(option: InstructionOption<entity.StakeToIndividualPoolParam, entity.StakeToIndividualPoolAccounts>) {
    return this.methods.stakeToIndividualPool(option.param.auwtAmount).accounts(option.accounts);
  }

  public unstakeFromIndividualPool(option: InstructionOption<entity.UnstakeFromIndividualPoolParam, entity.UnstakeFromIndividualPoolAccounts>) {
    return this.methods.unstakeFromIndividualPool(option.param.lpAuwtAmount).accounts(option.accounts);
  }

  public handleUpdateOccupiedCapacity(option: InstructionOption<entity.HandleUpdateOccupiedCapacityParam, entity.HandleUpdateOccupiedCapacityAccounts>) {
    return this.methods
      .handleUpdateOccupiedCapacity(option.param.callerIndex, option.param.productId, option.param.addFlag, option.param.commonOccupiedCapacityAmount, option.param.individualOccupiedCapacityAmount)
      .accounts(option.accounts);
  }

  public handleDispatchPremium(option: InstructionOption<entity.HandleDispatchPremiumParam, entity.HandleDispatchPremiumAccounts>) {
    return this.methods.handleDispatchPremium(option.param.callerIndex, option.param.productId, option.param.individualEarnedPremiumAmount).accounts(option.accounts);
  }

  public collectClaimPayout(option: InstructionOption<entity.CollectClaimPayoutParam, entity.CollectClaimPayoutAccounts>) {
    return this.methods.collectClaimPayout(option.param.callerIndex, option.param.auwtPayoutAmount).accounts(option.accounts);
  }
}
