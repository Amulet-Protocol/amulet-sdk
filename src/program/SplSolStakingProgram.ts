// Generated by "npm run codegen". Do not modify this file manually.
import type { AccountClient, Idl, MethodsNamespace, Provider } from '@project-serum/anchor';
import type { PublicKey } from '@solana/web3.js';
import type { InstructionOption } from './Common';
import type * as entity from './SplSolStakingEntity';
import { Program } from '@project-serum/anchor';

type SplSolStakingAccountClients = {
  readonly splTokenInvestmentState: AccountClient;
  readonly stakingInstanceState: AccountClient;
  readonly summaryStateV1: AccountClient;
  readonly ticketState: AccountClient;
};
type SplSolStakingMethodBuilders = {
  readonly initializeSummaryStateV1: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateAdminAuthInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateSummaryStateInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateInvestmentSplTokenOwnerInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminAddStakingInstance: MethodsNamespace[keyof MethodsNamespace];
  readonly adminAttachLiqToStakingInstance: MethodsNamespace[keyof MethodsNamespace];
  readonly addLiquidity: MethodsNamespace[keyof MethodsNamespace];
  readonly updateAuwtPrice: MethodsNamespace[keyof MethodsNamespace];
  readonly removeLiquidity: MethodsNamespace[keyof MethodsNamespace];
  readonly liqUnstakeSpl: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateLiqUnstakeInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateTicketUnstakeInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateProgramPauseInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateOperatorAuth: MethodsNamespace[keyof MethodsNamespace];
  readonly operatorUpdateProgramPauseInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly stakeSplGetAuwt: MethodsNamespace[keyof MethodsNamespace];
  readonly mintFromSolToAuwt: MethodsNamespace[keyof MethodsNamespace];
  readonly submitWithdrawTicket: MethodsNamespace[keyof MethodsNamespace];
  readonly claimSplTokenFromTicket: MethodsNamespace[keyof MethodsNamespace];
  readonly allocateSplTokenInvestment: MethodsNamespace[keyof MethodsNamespace];
  readonly returnSplTokenInvestment: MethodsNamespace[keyof MethodsNamespace];
  readonly distributeProfitOnSplTokenInvestment: MethodsNamespace[keyof MethodsNamespace];
  readonly declareLossOnSplTokenInvestment: MethodsNamespace[keyof MethodsNamespace];
};

export class SplSolStakingProgram {
  public readonly program: Program;

  public constructor(idl: Idl, address: PublicKey, provider: Provider) {
    this.program = new Program(idl, address, provider);
  }

  public get idl() {
    return this.program.idl;
  }

  public get programId() {
    return this.program.programId;
  }

  public get account() {
    return this.program.account as SplSolStakingAccountClients;
  }

  public get methods() {
    return this.program.methods as SplSolStakingMethodBuilders;
  }

  public initializeSummaryStateV1(option: InstructionOption<entity.InitializeSummaryStateV1Param, entity.InitializeSummaryStateV1Accounts>) {
    return this.methods
      .initializeSummaryStateV1(
        option.param.splSolStakingCallerPdaBump,
        option.param.splSolStakingCallerAuwtTokenProgIndex,
        option.param.splSolStakingCallerPoolProgIndex,
        option.param.programInvestmentSplTokenMaxPctg,
      )
      .accounts(option.accounts);
  }

  public adminUpdateAdminAuthInfo(option: InstructionOption<void, entity.AdminUpdateAdminAuthInfoAccounts>) {
    return this.methods.adminUpdateAdminAuthInfo().accounts(option.accounts);
  }

  public adminUpdateSummaryStateInfo(option: InstructionOption<entity.AdminUpdateSummaryStateInfoParam, entity.AdminUpdateSummaryStateInfoAccounts>) {
    return this.methods
      .adminUpdateSummaryStateInfo(option.param.splSolStakingCallerAuwtTokenProgIndex, option.param.splSolStakingCallerPoolProgIndex, option.param.programInvestmentSplTokenMaxPctg)
      .accounts(option.accounts);
  }

  public adminUpdateInvestmentSplTokenOwnerInfo(option: InstructionOption<entity.AdminUpdateInvestmentSplTokenOwnerInfoParam, entity.AdminUpdateInvestmentSplTokenOwnerInfoAccounts>) {
    return this.methods.adminUpdateInvestmentSplTokenOwnerInfo(option.param.splTokenOwnerIndex, option.param.splTokenOwnerKey).accounts(option.accounts);
  }

  public adminAddStakingInstance(option: InstructionOption<entity.AdminAddStakingInstanceParam, entity.AdminAddStakingInstanceAccounts>) {
    return this.methods.adminAddStakingInstance(option.param.programStakedSplTaAuthPdaBump).accounts(option.accounts);
  }

  public adminAttachLiqToStakingInstance(option: InstructionOption<entity.AdminAttachLiqToStakingInstanceParam, entity.AdminAttachLiqToStakingInstanceAccounts>) {
    return this.methods
      .adminAttachLiqToStakingInstance(option.param.programLiqStakedSplTaAuthPdaBump, option.param.programLiqAuwtTaAuthPdaBump, option.param.lpMintAuthPdaBump)
      .accounts(option.accounts);
  }

  public addLiquidity(option: InstructionOption<entity.AddLiquidityParam, entity.AddLiquidityAccounts>) {
    return this.methods.addLiquidity(option.param.splTokenAmount).accounts(option.accounts);
  }

  public updateAuwtPrice(option: InstructionOption<void, entity.UpdateAuwtPriceAccounts>) {
    return this.methods.updateAuwtPrice().accounts(option.accounts);
  }

  public removeLiquidity(option: InstructionOption<entity.RemoveLiquidityParam, entity.RemoveLiquidityAccounts>) {
    return this.methods.removeLiquidity(option.param.lpTokenAmount).accounts(option.accounts);
  }

  public liqUnstakeSpl(option: InstructionOption<entity.LiqUnstakeSplParam, entity.LiqUnstakeSplAccounts>) {
    return this.methods.liqUnstakeSpl(option.param.auwtTokenAmount).accounts(option.accounts);
  }

  public adminUpdateLiqUnstakeInfo(option: InstructionOption<entity.AdminUpdateLiqUnstakeInfoParam, entity.AdminUpdateLiqUnstakeInfoAccounts>) {
    return this.methods
      .adminUpdateLiqUnstakeInfo(
        option.param.pcuvLiqFeeShare,
        option.param.pcuvLiqFeeBasepoint,
        option.param.programLiqFeeCeilingSpl,
        option.param.programLiqFeeFloorSpl,
        option.param.programLiqFeeBasepoint,
        option.param.programLiqFeeMax,
        option.param.programLiqFeeMin,
      )
      .accounts(option.accounts);
  }

  public adminUpdateTicketUnstakeInfo(option: InstructionOption<entity.AdminUpdateTicketUnstakeInfoParam, entity.AdminUpdateTicketUnstakeInfoAccounts>) {
    return this.methods.adminUpdateTicketUnstakeInfo(option.param.ticketUnstakeWaitingEpoch).accounts(option.accounts);
  }

  public adminUpdateProgramPauseInfo(option: InstructionOption<entity.AdminUpdateProgramPauseInfoParam, entity.AdminUpdateProgramPauseInfoAccounts>) {
    return this.methods.adminUpdateProgramPauseInfo(option.param.programIsPaused).accounts(option.accounts);
  }

  public adminUpdateOperatorAuth(option: InstructionOption<void, entity.AdminUpdateOperatorAuthAccounts>) {
    return this.methods.adminUpdateOperatorAuth().accounts(option.accounts);
  }

  public operatorUpdateProgramPauseInfo(option: InstructionOption<void, entity.OperatorUpdateProgramPauseInfoAccounts>) {
    return this.methods.operatorUpdateProgramPauseInfo().accounts(option.accounts);
  }

  public stakeSplGetAuwt(option: InstructionOption<entity.StakeSplGetAuwtParam, entity.StakeSplGetAuwtAccounts>) {
    return this.methods.stakeSplGetAuwt(option.param.splTokenAmount).accounts(option.accounts);
  }

  public mintFromSolToAuwt(option: InstructionOption<entity.MintFromSolToAuwtParam, entity.MintFromSolToAuwtAccounts>) {
    return this.methods.mintFromSolToAuwt(option.param.solAmount).accounts(option.accounts);
  }

  public submitWithdrawTicket(option: InstructionOption<entity.SubmitWithdrawTicketParam, entity.SubmitWithdrawTicketAccounts>) {
    return this.methods.submitWithdrawTicket(option.param.auwtAmount).accounts(option.accounts);
  }

  public claimSplTokenFromTicket(option: InstructionOption<void, entity.ClaimSplTokenFromTicketAccounts>) {
    return this.methods.claimSplTokenFromTicket().accounts(option.accounts);
  }

  public allocateSplTokenInvestment(option: InstructionOption<entity.AllocateSplTokenInvestmentParam, entity.AllocateSplTokenInvestmentAccounts>) {
    return this.methods.allocateSplTokenInvestment(option.param.splTokenOwnerIndex, option.param.investmentAmount).accounts(option.accounts);
  }

  public returnSplTokenInvestment(option: InstructionOption<entity.ReturnSplTokenInvestmentParam, entity.ReturnSplTokenInvestmentAccounts>) {
    return this.methods.returnSplTokenInvestment(option.param.returnedInvestmentAmount).accounts(option.accounts);
  }

  public distributeProfitOnSplTokenInvestment(option: InstructionOption<entity.DistributeProfitOnSplTokenInvestmentParam, entity.DistributeProfitOnSplTokenInvestmentAccounts>) {
    return this.methods.distributeProfitOnSplTokenInvestment(option.param.profitAmount).accounts(option.accounts);
  }

  public declareLossOnSplTokenInvestment(option: InstructionOption<entity.DeclareLossOnSplTokenInvestmentParam, entity.DeclareLossOnSplTokenInvestmentAccounts>) {
    return this.methods.declareLossOnSplTokenInvestment(option.param.lossAmount).accounts(option.accounts);
  }
}
