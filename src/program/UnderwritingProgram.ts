// Generated by "npm run codegen". Do not modify this file manually.
import type { AccountClient, Idl, MethodsNamespace, Provider } from '@project-serum/anchor';
import type { PublicKey } from '@solana/web3.js';
import type { InstructionOption } from './Common';
import type * as entity from './UnderwritingEntity';
import { Program } from '@project-serum/anchor';

type UnderwritingAccountClients = {
  readonly underwritingMetadataState: AccountClient;
  readonly productPremiumState: AccountClient;
};
type UnderwritingMethodBuilders = {
  readonly initializeMetadataState: MethodsNamespace[keyof MethodsNamespace];
  readonly initializeProductPremiumState: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateAdminAuthInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateProgramPauseInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateMetadataInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly buyCover: MethodsNamespace[keyof MethodsNamespace];
  readonly renewCover: MethodsNamespace[keyof MethodsNamespace];
  readonly expireCover: MethodsNamespace[keyof MethodsNamespace];
  readonly cancelCover: MethodsNamespace[keyof MethodsNamespace];
  readonly stakeProductPremium: MethodsNamespace[keyof MethodsNamespace];
  readonly underwriteProductPremium: MethodsNamespace[keyof MethodsNamespace];
  readonly dispatchPremium: MethodsNamespace[keyof MethodsNamespace];
};

export class UnderwritingProgram {
  public readonly program: Program;

  public constructor(idl: Idl, address: PublicKey, provider: Provider) {
    this.program = new Program(idl, address, provider);
  }

  public get idl() {
    return this.program.idl;
  }

  public get programId() {
    return this.program.programId;
  }

  public get account() {
    return this.program.account as UnderwritingAccountClients;
  }

  public get methods() {
    return this.program.methods as UnderwritingMethodBuilders;
  }

  public initializeMetadataState(option: InstructionOption<entity.InitializeMetadataStateParam, entity.InitializeMetadataStateAccounts>) {
    return this.methods
      .initializeMetadataState(
        option.param.treasurySolCancelCoverFeePctg,
        option.param.treasuryAuwtPremiumSharingPctg,
        option.param.underwritingCallerAuthPdaBump,
        option.param.premiumPoolAccountPdaBump,
        option.param.underwritingCallerAuwtTokenProgIndex,
        option.param.underwritingCallerPoolProgIndex,
        option.param.underwritingCallerCoverProgIndex,
      )
      .accounts(option.accounts);
  }

  public initializeProductPremiumState(option: InstructionOption<entity.InitializeProductPremiumStateParam, entity.InitializeProductPremiumStateAccounts>) {
    return this.methods.initializeProductPremiumState(option.param.productId).accounts(option.accounts);
  }

  public adminUpdateAdminAuthInfo(option: InstructionOption<void, entity.AdminUpdateAdminAuthInfoAccounts>) {
    return this.methods.adminUpdateAdminAuthInfo().accounts(option.accounts);
  }

  public adminUpdateProgramPauseInfo(option: InstructionOption<entity.AdminUpdateProgramPauseInfoParam, entity.AdminUpdateProgramPauseInfoAccounts>) {
    return this.methods.adminUpdateProgramPauseInfo(option.param.programIsPaused).accounts(option.accounts);
  }

  public adminUpdateMetadataInfo(option: InstructionOption<entity.AdminUpdateMetadataInfoParam, entity.AdminUpdateMetadataInfoAccounts>) {
    return this.methods
      .adminUpdateMetadataInfo(
        option.param.treasurySolCancelCoverFeePctg,
        option.param.treasuryAuwtPremiumSharingPctg,
        option.param.underwritingCallerAuwtTokenProgIndex,
        option.param.underwritingCallerPoolProgIndex,
        option.param.underwritingCallerCoverProgIndex,
      )
      .accounts(option.accounts);
  }

  public buyCover(option: InstructionOption<entity.BuyCoverParam, entity.BuyCoverAccounts>) {
    return this.methods
      .buyCover(
        option.param.coverId,
        option.param.coverOwner,
        option.param.coverReferrer,
        option.param.coverProductId,
        option.param.coverDurationInDays,
        option.param.coverCurrency,
        option.param.coverAmount,
      )
      .accounts(option.accounts);
  }

  public renewCover(option: InstructionOption<entity.RenewCoverParam, entity.RenewCoverAccounts>) {
    return this.methods.renewCover(option.param.coverId, option.param.newCoverDurationInDays).accounts(option.accounts);
  }

  public expireCover(option: InstructionOption<entity.ExpireCoverParam, entity.ExpireCoverAccounts>) {
    return this.methods.expireCover(option.param.coverId).accounts(option.accounts);
  }

  public cancelCover(option: InstructionOption<entity.CancelCoverParam, entity.CancelCoverAccounts>) {
    return this.methods.cancelCover(option.param.coverId).accounts(option.accounts);
  }

  public stakeProductPremium(option: InstructionOption<entity.StakeProductPremiumParam, entity.StakeProductPremiumAccounts>) {
    return this.methods.stakeProductPremium(option.param.coverId).accounts(option.accounts);
  }

  public underwriteProductPremium(option: InstructionOption<void, entity.UnderwriteProductPremiumAccounts>) {
    return this.methods.underwriteProductPremium().accounts(option.accounts);
  }

  public dispatchPremium(option: InstructionOption<void, entity.DispatchPremiumAccounts>) {
    return this.methods.dispatchPremium().accounts(option.accounts);
  }
}
