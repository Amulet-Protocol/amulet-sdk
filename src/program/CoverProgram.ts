// Generated by "npm run codegen". Do not modify this file manually.
import type { AccountClient, Idl, MethodsNamespace, Provider } from '@project-serum/anchor';
import type { PublicKey } from '@solana/web3.js';
import type { InstructionOption } from './Common';
import type * as entity from './CoverEntity';
import { Program } from '@project-serum/anchor';

type CoverAccountClients = {
  readonly coverState: AccountClient;
  readonly coverMetadataState: AccountClient;
};
type CoverMethodBuilders = {
  readonly initializeMetadataState: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateCallerInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateAdminAuthInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminUpdateMetadataInfo: MethodsNamespace[keyof MethodsNamespace];
  readonly adminEnlargeAccount: MethodsNamespace[keyof MethodsNamespace];
  readonly handleNewCover: MethodsNamespace[keyof MethodsNamespace];
  readonly handleRenewCover: MethodsNamespace[keyof MethodsNamespace];
  readonly handleExpiredCover: MethodsNamespace[keyof MethodsNamespace];
  readonly handleCancelCover: MethodsNamespace[keyof MethodsNamespace];
  readonly handleDispatchPremium: MethodsNamespace[keyof MethodsNamespace];
  readonly handleSubmitClaim: MethodsNamespace[keyof MethodsNamespace];
  readonly handleCloseClaim: MethodsNamespace[keyof MethodsNamespace];
};

export class CoverProgram {
  public readonly program: Program;

  public constructor(idl: Idl, address: PublicKey, provider: Provider) {
    this.program = new Program(idl, address, provider);
  }

  public get idl() {
    return this.program.idl;
  }

  public get programId() {
    return this.program.programId;
  }

  public get account() {
    return this.program.account as CoverAccountClients;
  }

  public get methods() {
    return this.program.methods as CoverMethodBuilders;
  }

  public initializeMetadataState(option: InstructionOption<entity.InitializeMetadataStateParam, entity.InitializeMetadataStateAccounts>) {
    return this.methods
      .initializeMetadataState(
        option.param.coverPremiumCurrency,
        option.param.coverCurrency,
        option.param.coverMinAmount,
        option.param.coverMaxAmount,
        option.param.coverMinDurationInDays,
        option.param.coverMaxDurationInDays,
        option.param.coverExtendedClaimDurationInDays,
      )
      .accounts(option.accounts);
  }

  public adminUpdateCallerInfo(option: InstructionOption<entity.AdminUpdateCallerInfoParam, entity.AdminUpdateCallerInfoAccounts>) {
    return this.methods.adminUpdateCallerInfo(option.param.callerIndex, option.param.callerKey).accounts(option.accounts);
  }

  public adminUpdateAdminAuthInfo(option: InstructionOption<void, entity.AdminUpdateAdminAuthInfoAccounts>) {
    return this.methods.adminUpdateAdminAuthInfo().accounts(option.accounts);
  }

  public adminUpdateMetadataInfo(option: InstructionOption<entity.AdminUpdateMetadataInfoParam, entity.AdminUpdateMetadataInfoAccounts>) {
    return this.methods
      .adminUpdateMetadataInfo(
        option.param.coverPremiumCurrency,
        option.param.coverCurrency,
        option.param.coverMinAmount,
        option.param.coverMaxAmount,
        option.param.coverMinDurationInDays,
        option.param.coverMaxDurationInDays,
        option.param.coverExtendedClaimDurationInDays,
      )
      .accounts(option.accounts);
  }

  public adminEnlargeAccount(option: InstructionOption<entity.AdminEnlargeAccountParam, entity.AdminEnlargeAccountAccounts>) {
    return this.methods.adminEnlargeAccount(option.param.targetLength).accounts(option.accounts);
  }

  public handleNewCover(option: InstructionOption<entity.HandleNewCoverParam, entity.HandleNewCoverAccounts>) {
    return this.methods
      .handleNewCover(
        option.param.callerIndex,
        option.param.coverId,
        option.param.coverOwner,
        option.param.coverReferrer,
        option.param.coverProductId,
        option.param.coverBeginTimestamp,
        option.param.coverEndTimestamp,
        option.param.coverCurrency,
        option.param.coverAmount,
        option.param.coverOccupiedCommonAmount,
        option.param.coverOccupiedIndividualAmount,
        option.param.coverPremiumCurrency,
        option.param.coverPremiumAmount,
        option.param.coverStatus,
      )
      .accounts(option.accounts);
  }

  public handleRenewCover(option: InstructionOption<entity.HandleRenewCoverParam, entity.HandleRenewCoverAccounts>) {
    return this.methods.handleRenewCover(option.param.callerIndex, option.param.coverId, option.param.newCoverEndTimestamp, option.param.newCoverPremiumAmount).accounts(option.accounts);
  }

  public handleExpiredCover(option: InstructionOption<entity.HandleExpiredCoverParam, entity.HandleExpiredCoverAccounts>) {
    return this.methods.handleExpiredCover(option.param.callerIndex, option.param.coverId).accounts(option.accounts);
  }

  public handleCancelCover(option: InstructionOption<entity.HandleCancelCoverParam, entity.HandleCancelCoverAccounts>) {
    return this.methods.handleCancelCover(option.param.callerIndex, option.param.coverId, option.param.unearnedPremiumAmount).accounts(option.accounts);
  }

  public handleDispatchPremium(option: InstructionOption<entity.HandleDispatchPremiumParam, entity.HandleDispatchPremiumAccounts>) {
    return this.methods.handleDispatchPremium(option.param.callerIndex, option.param.coverId, option.param.dispatchedTimestamp, option.param.dispatchedPremiumAmount).accounts(option.accounts);
  }

  public handleSubmitClaim(option: InstructionOption<entity.HandleSubmitClaimParam, entity.HandleSubmitClaimAccounts>) {
    return this.methods.handleSubmitClaim(option.param.callerIndex, option.param.coverId).accounts(option.accounts);
  }

  public handleCloseClaim(option: InstructionOption<entity.HandleCloseClaimParam, entity.HandleCloseClaimAccounts>) {
    return this.methods.handleCloseClaim(option.param.callerIndex, option.param.coverId, option.param.claimedAmount).accounts(option.accounts);
  }
}
